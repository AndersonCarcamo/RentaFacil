openapi: 3.0.3
info:
  title: EasyRent API - Sistema Completo de Marketplace Inmobiliario
  description: |
    API completa para el marketplace inmobiliario EasyRent con todas las funcionalidades:
    - üîê **Autenticaci√≥n**: JWT + API Keys (Compatible con base de datos PostgreSQL)
    - üë• **Gesti√≥n de usuarios y agencias**
    - üè† **Listings y multimedia**
    - üîç **B√∫squeda avanzada y filtros**
    - üíé **Sistema de planes y facturaci√≥n**
    - üìä **Analytics y reportes**
    - ‚úÖ **Verificaci√≥n y moderaci√≥n**
    - üîó **Integraciones externas**
    
    ## Tecnolog√≠as
    - **Framework**: FastAPI + Python 3.11+
    - **Base de datos**: PostgreSQL 17
    - **Cache**: Redis
    - **Message Broker**: Apache Kafka
    - **Autenticaci√≥n**: JWT (Bearer Token)
    
    ## Notas de Implementaci√≥n
    - **Autenticaci√≥n Firebase**: Sistema de autenticaci√≥n completo con Firebase Authentication
    - **Flujo de autenticaci√≥n**: Frontend ‚Üí Firebase ‚Üí Backend verification ‚Üí JWT tokens
    - **Sin manejo de passwords**: Toda la gesti√≥n de credenciales delegada a Firebase
    - **Soporte h√≠brido**: Funciona con o sin Firebase configurado (modo desarrollo)
    - **Schemas actualizados**: Los modelos de datos coinciden con la implementaci√≥n real en FastAPI
    
    ## Autenticaci√≥n Firebase
    Para autenticarse, el cliente debe:
    1. Autenticarse con Firebase (frontend)
    2. Obtener el Firebase ID token
    3. Enviar el token al endpoint `/auth/login`
    4. Usar el JWT token devuelto para posteriores requests
    
  version: 1.0.0
  contact:
    name: Inmobiliaria Benites
    email: api@easyrent.pe
  license:
    name: Proprietary

servers:
  - url: https://api.easyrent.pe/v1
    description: Producci√≥n
  - url: https://staging-api.easyrent.pe/v1
    description: Staging
  - url: http://localhost:8000/v1
    description: Desarrollo Local

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Authentication
    description: Autenticaci√≥n y autorizaci√≥n
  - name: Users
    description: Gesti√≥n de usuarios
  - name: Agencies
    description: Gesti√≥n de agencias inmobiliarias
  - name: Listings
    description: Propiedades y anuncios
  - name: Search
    description: B√∫squeda y filtros
  - name: Media
    description: Im√°genes y videos
  - name: Interactions
    description: Interacciones de usuario
  - name: Plans
    description: Planes de suscripci√≥n
  - name: Billing
    description: Facturaci√≥n y pagos
  - name: Analytics
    description: M√©tricas y reportes
  - name: Verification
    description: Verificaci√≥n y moderaci√≥n
  - name: Notifications
    description: Notificaciones
  - name: Admin
    description: Administraci√≥n del sistema
  - name: Integrations
    description: Integraciones externas
  - name: Bulk Operations
    description: Operaciones en lote
  - name: Webhooks
    description: Gesti√≥n de webhooks
  - name: Developer Tools
    description: Herramientas para desarrolladores
  - name: System
    description: Utilidades del sistema

paths:
  # ===========================================
  # AUTHENTICATION & AUTHORIZATION
  # ===========================================
  /auth/register:
    post:
      tags: [Authentication]
      summary: Registro de nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, first_name, last_name]
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                last_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                phone:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                firebase_uid:
                  type: string
                  description: Firebase authentication UID (opcional)
                role:
                  type: string
                  enum: [user, tenant, landlord, agent, admin]
                  default: user
                national_id:
                  type: string
                  description: N√∫mero de documento de identidad
                national_id_type:
                  type: string
                  default: DNI
            example:
              email: "usuario@ejemplo.com"
              first_name: "Juan"
              last_name: "P√©rez"
              phone: "+51987654321"
              role: "user"
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Datos inv√°lidos
        '409':
          description: Email ya existe
        '500':
          description: Error interno del servidor

  /auth/login:
    post:
      tags: [Authentication]
      summary: Inicio de sesi√≥n con Firebase
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firebase_token]
              properties:
                firebase_token:
                  type: string
                  description: Token de autenticaci√≥n Firebase ID
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
            example:
              firebase_token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT token para autorizaci√≥n API
                  refresh_token:
                    type: string
                    description: Token para renovar access_token
                  token_type:
                    type: string
                    default: bearer
                  expires_in:
                    type: integer
                    description: Tiempo de expiraci√≥n en segundos
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Firebase token requerido
        '401':
          description: Token Firebase inv√°lido o usuario no encontrado

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Cerrar sesi√≥n
      responses:
        '200':
          description: Logout exitoso

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Renovar token de acceso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token renovado

  /auth/me:
    get:
      tags: [Authentication]
      summary: Obtener informaci√≥n del usuario autenticado
      description: Obtiene la informaci√≥n del usuario que est√° autenticado con el token JWT
      responses:
        '200':
          description: Informaci√≥n del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Token inv√°lido o expirado

  # ===========================================
  # USER MANAGEMENT
  # ===========================================
  /users:
    get:
      tags: [Users]
      summary: Listar usuarios (admin)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          schema:
            type: string
            enum: [user, tenant, landlord, agent, admin]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'

    post:
      tags: [Users]
      summary: Crear usuario (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Usuario creado

  /users/me:
    get:
      tags: [Users]
      summary: Obtener perfil propio
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [Users]
      summary: Actualizar perfil propio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Perfil actualizado

    delete:
      tags: [Users]
      summary: Eliminar cuenta propia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Cuenta eliminada

  /users/{user_id}:
    get:
      tags: [Users]
      summary: Obtener usuario por ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [Users]
      summary: Actualizar usuario (admin)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuario actualizado

    delete:
      tags: [Users]
      summary: Eliminar usuario (admin)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Usuario eliminado

  /users/me/password:
    put:
      tags: [Users]
      summary: Cambiar contrase√±a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password]
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Contrase√±a actualizada

  /users/me/avatar:
    post:
      tags: [Users]
      summary: Subir avatar
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar actualizado

    delete:
      tags: [Users]
      summary: Eliminar avatar
      responses:
        '200':
          description: Avatar eliminado

  /users/me/preferences:
    get:
      tags: [Users]
      summary: Obtener preferencias
      responses:
        '200':
          description: Preferencias del usuario

    put:
      tags: [Users]
      summary: Actualizar preferencias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Preferencias actualizadas

  /users/me/privacy:
    get:
      tags: [Users]
      summary: Obtener configuraci√≥n de privacidad
      responses:
        '200':
          description: Configuraci√≥n de privacidad

    put:
      tags: [Users]
      summary: Actualizar configuraci√≥n de privacidad
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivacySettings'
      responses:
        '200':
          description: Configuraci√≥n actualizada

  # ===========================================
  # AGENCY MANAGEMENT
  # ===========================================
  /agencies:
    get:
      tags: [Agencies]
      summary: Listar agencias
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: search
          in: query
          schema:
            type: string
        - name: city
          in: query
          schema:
            type: string
        - name: verified
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Lista de agencias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgencies'

    post:
      tags: [Agencies]
      summary: Crear agencia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgencyRequest'
      responses:
        '201':
          description: Agencia creada

  /agencies/{agency_id}:
    get:
      tags: [Agencies]
      summary: Obtener agencia por ID
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datos de la agencia
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agency'

    put:
      tags: [Agencies]
      summary: Actualizar agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgencyRequest'
      responses:
        '200':
          description: Agencia actualizada

    delete:
      tags: [Agencies]
      summary: Eliminar agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agencia eliminada

  /agencies/{agency_id}/agents:
    get:
      tags: [Agencies]
      summary: Listar agentes de la agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista de agentes

    post:
      tags: [Agencies]
      summary: Agregar agente a la agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [agent, supervisor, manager]
      responses:
        '201':
          description: Agente agregado

  /agencies/{agency_id}/agents/{user_id}:
    delete:
      tags: [Agencies]
      summary: Remover agente de la agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agente removido

  /agencies/{agency_id}/verification:
    post:
      tags: [Agencies]
      summary: Solicitar verificaci√≥n de agencia
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                business_license:
                  type: string
                  format: binary
                tax_document:
                  type: string
                  format: binary
                additional_documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Solicitud de verificaci√≥n enviada

  # ===========================================
  # LISTINGS MANAGEMENT
  # ===========================================
  /listings:
    get:
      tags: [Listings]
      summary: Listar propiedades
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: operation_type
          in: query
          schema:
            type: string
            enum: [sale, rent, temp_rent, pre_sale]
        - name: property_type
          in: query
          schema:
            type: string
            enum: [house, apartment, office, commercial, land, warehouse]
        - name: city
          in: query
          schema:
            type: string
        - name: district
          in: query
          schema:
            type: string
        - name: min_price
          in: query
          schema:
            type: number
        - name: max_price
          in: query
          schema:
            type: number
        - name: bedrooms
          in: query
          schema:
            type: integer
        - name: bathrooms
          in: query
          schema:
            type: integer
        - name: min_area
          in: query
          schema:
            type: number
        - name: max_area
          in: query
          schema:
            type: number
        - name: min_age_years
          in: query
          schema:
            type: integer
            minimum: 0
            description: Antig√ºedad m√≠nima de la vivienda en a√±os
        - name: max_age_years
          in: query
          schema:
            type: integer
            minimum: 0
            description: Antig√ºedad m√°xima de la vivienda en a√±os
        - name: features
          in: query
          schema:
            type: array
            items:
              type: string
        - name: amenities
          in: query
          schema:
            type: array
            items:
              type: string
        - name: verified
          in: query
          schema:
            type: boolean
        - name: sort
          in: query
          schema:
            type: string
            enum: [price_asc, price_desc, area_asc, area_desc, date_asc, date_desc, age_asc, age_desc, relevance]
      responses:
        '200':
          description: Lista de propiedades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListings'

    post:
      tags: [Listings]
      summary: Crear nueva propiedad
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListingRequest'
      responses:
        '201':
          description: Propiedad creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'

  /listings/{listing_id}:
    get:
      tags: [Listings]
      summary: Obtener propiedad por ID
      security: []
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datos de la propiedad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'

    put:
      tags: [Listings]
      summary: Actualizar propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListingRequest'
      responses:
        '200':
          description: Propiedad actualizada

    delete:
      tags: [Listings]
      summary: Eliminar propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Propiedad eliminada

  /listings/{listing_id}/status:
    put:
      tags: [Listings]
      summary: Cambiar estado de propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [draft, active, inactive, sold, rented, expired]
                reason:
                  type: string
      responses:
        '200':
          description: Estado actualizado

  /listings/{listing_id}/publish:
    post:
      tags: [Listings]
      summary: Publicar propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Propiedad publicada

  /listings/{listing_id}/unpublish:
    post:
      tags: [Listings]
      summary: Despublicar propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Propiedad despublicada

  /listings/{listing_id}/duplicate:
    post:
      tags: [Listings]
      summary: Duplicar propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Propiedad duplicada

  /listings/{listing_id}/views:
    post:
      tags: [Listings]
      summary: Registrar visualizaci√≥n
      security: []
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  type: string
                utm_source:
                  type: string
                utm_medium:
                  type: string
                utm_campaign:
                  type: string
      responses:
        '200':
          description: Visualizaci√≥n registrada

  /listings/my:
    get:
      tags: [Listings]
      summary: Mis propiedades
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, inactive, sold, rented, expired]
      responses:
        '200':
          description: Mis propiedades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListings'

  # ===========================================
  # SEARCH & FILTERS
  # ===========================================
  /search:
    get:
      tags: [Search]
      summary: B√∫squeda general
      security: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
            description: Texto de b√∫squeda
        - name: location
          in: query
          schema:
            type: string
            description: Ubicaci√≥n (ciudad, distrito, etc.)
        - name: lat
          in: query
          schema:
            type: number
            description: Latitud para b√∫squeda por proximidad
        - name: lng
          in: query
          schema:
            type: number
            description: Longitud para b√∫squeda por proximidad
        - name: radius
          in: query
          schema:
            type: number
            description: Radio en kil√≥metros
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Resultados de b√∫squeda
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /search/suggestions:
    get:
      tags: [Search]
      summary: Sugerencias de b√∫squeda
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            description: Texto parcial para autocompletar
        - name: type
          in: query
          schema:
            type: string
            enum: [location, property_type, all]
      responses:
        '200':
          description: Sugerencias
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        type:
                          type: string
                        count:
                          type: integer

  /search/filters:
    get:
      tags: [Search]
      summary: Obtener filtros disponibles
      security: []
      parameters:
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Filtros disponibles

  /search/saved:
    get:
      tags: [Search]
      summary: B√∫squedas guardadas
      responses:
        '200':
          description: B√∫squedas guardadas del usuario

    post:
      tags: [Search]
      summary: Guardar b√∫squeda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, filters]
              properties:
                name:
                  type: string
                filters:
                  type: object
                notifications:
                  type: boolean
                  default: true
      responses:
        '201':
          description: B√∫squeda guardada

  /search/saved/{search_id}:
    get:
      tags: [Search]
      summary: Obtener b√∫squeda guardada
      parameters:
        - name: search_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: B√∫squeda guardada

    put:
      tags: [Search]
      summary: Actualizar b√∫squeda guardada
      parameters:
        - name: search_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                filters:
                  type: object
                notifications:
                  type: boolean
      responses:
        '200':
          description: B√∫squeda actualizada

    delete:
      tags: [Search]
      summary: Eliminar b√∫squeda guardada
      parameters:
        - name: search_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: B√∫squeda eliminada

  # ===========================================
  # MEDIA MANAGEMENT
  # ===========================================
  /listings/{listing_id}/images:
    get:
      tags: [Media]
      summary: Obtener im√°genes de propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista de im√°genes

    post:
      tags: [Media]
      summary: Subir im√°genes
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                descriptions:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Im√°genes subidas

  /listings/{listing_id}/images/{image_id}:
    put:
      tags: [Media]
      summary: Actualizar imagen
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: image_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                is_primary:
                  type: boolean
                order_index:
                  type: integer
      responses:
        '200':
          description: Imagen actualizada

    delete:
      tags: [Media]
      summary: Eliminar imagen
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: image_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Imagen eliminada

  /listings/{listing_id}/videos:
    get:
      tags: [Media]
      summary: Obtener videos de propiedad
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista de videos

    post:
      tags: [Media]
      summary: Subir video
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
                title:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Video subido

  /listings/{listing_id}/videos/{video_id}:
    put:
      tags: [Media]
      summary: Actualizar video
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: video_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Video actualizado

    delete:
      tags: [Media]
      summary: Eliminar video
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: video_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Video eliminado

  /media/upload-url:
    post:
      tags: [Media]
      summary: Obtener URL de subida directa (S3 presigned)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [filename, content_type]
              properties:
                filename:
                  type: string
                content_type:
                  type: string
                size:
                  type: integer
      responses:
        '200':
          description: URL de subida y metadata

  # ===========================================
  # USER INTERACTIONS
  # ===========================================
  /favorites:
    get:
      tags: [Interactions]
      summary: Obtener favoritos
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Lista de favoritos

  /favorites/{listing_id}:
    post:
      tags: [Interactions]
      summary: Agregar a favoritos
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Agregado a favoritos

    delete:
      tags: [Interactions]
      summary: Remover de favoritos
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Removido de favoritos

  /leads:
    get:
      tags: [Interactions]
      summary: Obtener leads (para agentes/propietarios)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: listing_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [new, contacted, qualified, converted, lost]
        - name: source
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de leads

    post:
      tags: [Interactions]
      summary: Crear lead
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [listing_id, message]
              properties:
                listing_id:
                  type: string
                  format: uuid
                message:
                  type: string
                phone:
                  type: string
                preferred_contact_time:
                  type: string
                utm_source:
                  type: string
                utm_medium:
                  type: string
                utm_campaign:
                  type: string
      responses:
        '201':
          description: Lead creado

  /leads/{lead_id}:
    get:
      tags: [Interactions]
      summary: Obtener lead por ID
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Datos del lead

    put:
      tags: [Interactions]
      summary: Actualizar lead
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [new, contacted, qualified, converted, lost]
                notes:
                  type: string
                follow_up_date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Lead actualizado

  /leads/{lead_id}/notes:
    post:
      tags: [Interactions]
      summary: Agregar nota al lead
      parameters:
        - name: lead_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Nota agregada

  /reviews:
    get:
      tags: [Interactions]
      summary: Obtener rese√±as
      parameters:
        - name: listing_id
          in: query
          schema:
            type: string
            format: uuid
        - name: agent_id
          in: query
          schema:
            type: string
            format: uuid
        - name: agency_id
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Lista de rese√±as

    post:
      tags: [Interactions]
      summary: Crear rese√±a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [target_type, target_id, rating, comment]
              properties:
                target_type:
                  type: string
                  enum: [listing, agent, agency]
                target_id:
                  type: string
                  format: uuid
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '201':
          description: Rese√±a creada

  /reviews/{review_id}:
    put:
      tags: [Interactions]
      summary: Actualizar rese√±a
      parameters:
        - name: review_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Rese√±a actualizada

    delete:
      tags: [Interactions]
      summary: Eliminar rese√±a
      parameters:
        - name: review_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Rese√±a eliminada

  # ===========================================
  # SUBSCRIPTION PLANS
  # ===========================================
  /plans:
    get:
      tags: [Plans]
      summary: Obtener planes disponibles
      security: []
      responses:
        '200':
          description: Lista de planes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'

  /plans/{plan_id}:
    get:
      tags: [Plans]
      summary: Obtener plan por ID
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles del plan

  /subscriptions:
    get:
      tags: [Plans]
      summary: Obtener suscripciones del usuario
      responses:
        '200':
          description: Suscripciones del usuario

    post:
      tags: [Plans]
      summary: Crear suscripci√≥n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plan_id]
              properties:
                plan_id:
                  type: string
                  format: uuid
                payment_method_id:
                  type: string
                billing_cycle:
                  type: string
                  enum: [monthly, yearly]
      responses:
        '201':
          description: Suscripci√≥n creada

  /subscriptions/{subscription_id}:
    get:
      tags: [Plans]
      summary: Obtener suscripci√≥n por ID
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles de la suscripci√≥n

    put:
      tags: [Plans]
      summary: Actualizar suscripci√≥n
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_id:
                  type: string
                  format: uuid
                billing_cycle:
                  type: string
                  enum: [monthly, yearly]
      responses:
        '200':
          description: Suscripci√≥n actualizada

    delete:
      tags: [Plans]
      summary: Cancelar suscripci√≥n
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                cancel_at_period_end:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Suscripci√≥n cancelada

  /subscriptions/{subscription_id}/pause:
    post:
      tags: [Plans]
      summary: Pausar suscripci√≥n
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pause_until:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Suscripci√≥n pausada

  /subscriptions/{subscription_id}/resume:
    post:
      tags: [Plans]
      summary: Reanudar suscripci√≥n
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Suscripci√≥n reanudada

  # ===========================================
  # BILLING & PAYMENTS
  # ===========================================
  /payment-methods:
    get:
      tags: [Billing]
      summary: Obtener m√©todos de pago
      responses:
        '200':
          description: Lista de m√©todos de pago

    post:
      tags: [Billing]
      summary: Agregar m√©todo de pago
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider, token]
              properties:
                provider:
                  type: string
                  enum: [stripe, culqi, mercadopago, paypal]
                token:
                  type: string
                is_default:
                  type: boolean
      responses:
        '201':
          description: M√©todo de pago agregado

  /payment-methods/{method_id}:
    put:
      tags: [Billing]
      summary: Actualizar m√©todo de pago
      parameters:
        - name: method_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_default:
                  type: boolean
      responses:
        '200':
          description: M√©todo de pago actualizado

    delete:
      tags: [Billing]
      summary: Eliminar m√©todo de pago
      parameters:
        - name: method_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: M√©todo de pago eliminado

  /invoices:
    get:
      tags: [Billing]
      summary: Obtener facturas
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, pending, paid, failed, refunded]
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de facturas

  /invoices/{invoice_id}:
    get:
      tags: [Billing]
      summary: Obtener factura por ID
      parameters:
        - name: invoice_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles de la factura

  /invoices/{invoice_id}/pay:
    post:
      tags: [Billing]
      summary: Pagar factura
      parameters:
        - name: invoice_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Pago procesado

  /invoices/{invoice_id}/download:
    get:
      tags: [Billing]
      summary: Descargar factura PDF
      parameters:
        - name: invoice_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: PDF de la factura
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /payments:
    get:
      tags: [Billing]
      summary: Obtener historial de pagos
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, completed, failed, refunded]
      responses:
        '200':
          description: Historial de pagos

  /payments/{payment_id}:
    get:
      tags: [Billing]
      summary: Obtener pago por ID
      parameters:
        - name: payment_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles del pago

  /payments/{payment_id}/refund:
    post:
      tags: [Billing]
      summary: Solicitar reembolso
      parameters:
        - name: payment_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                reason:
                  type: string
      responses:
        '200':
          description: Reembolso procesado

  # ===========================================
  # ANALYTICS & REPORTS
  # ===========================================
  /analytics/dashboard:
    get:
      tags: [Analytics]
      summary: Dashboard principal
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: M√©tricas del dashboard

  /analytics/listings:
    get:
      tags: [Analytics]
      summary: Anal√≠ticas de listings
      parameters:
        - name: listing_id
          in: query
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: M√©tricas de listings

  /analytics/users:
    get:
      tags: [Analytics]
      summary: Anal√≠ticas de usuarios (admin)
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: M√©tricas de usuarios

  /analytics/revenue:
    get:
      tags: [Analytics]
      summary: Anal√≠ticas de ingresos (admin)
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
        - name: granularity
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
      responses:
        '200':
          description: M√©tricas de ingresos

  /analytics/performance:
    get:
      tags: [Analytics]
      summary: Anal√≠ticas de rendimiento
      parameters:
        - name: metric
          in: query
          schema:
            type: string
            enum: [views, leads, conversion_rate, avg_days_on_market]
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: M√©tricas de rendimiento

  /reports/listings:
    get:
      tags: [Analytics]
      summary: Reporte de listings
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [json, csv, pdf]
            default: json
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Reporte generado

  /reports/revenue:
    get:
      tags: [Analytics]
      summary: Reporte de ingresos (admin)
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [json, csv, pdf]
            default: json
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Reporte de ingresos

  # ===========================================
  # VERIFICATION & MODERATION
  # ===========================================
  /verifications:
    get:
      tags: [Verification]
      summary: Obtener verificaciones (moderador)
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: type
          in: query
          schema:
            type: string
            enum: [listing, agency, user]
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Lista de verificaciones

    post:
      tags: [Verification]
      summary: Solicitar verificaci√≥n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [target_type, target_id]
              properties:
                target_type:
                  type: string
                  enum: [listing, agency, user]
                target_id:
                  type: string
                  format: uuid
                documents:
                  type: array
                  items:
                    type: string
                    format: uuid
                notes:
                  type: string
      responses:
        '201':
          description: Verificaci√≥n solicitada

  /verifications/{verification_id}:
    get:
      tags: [Verification]
      summary: Obtener verificaci√≥n por ID
      parameters:
        - name: verification_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles de la verificaci√≥n

    put:
      tags: [Verification]
      summary: Procesar verificaci√≥n (moderador)
      parameters:
        - name: verification_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
                notes:
                  type: string
                requirements:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Verificaci√≥n procesada

  /moderation/queue:
    get:
      tags: [Verification]
      summary: Cola de moderaci√≥n
      parameters:
        - name: priority
          in: query
          schema:
            type: string
            enum: [high, medium, low]
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Cola de moderaci√≥n

  /moderation/assign:
    post:
      tags: [Verification]
      summary: Asignar moderador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [verification_id, moderator_id]
              properties:
                verification_id:
                  type: string
                  format: uuid
                moderator_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Moderador asignado

  # ===========================================
  # NOTIFICATIONS
  # ===========================================
  /notifications:
    get:
      tags: [Notifications]
      summary: Obtener notificaciones
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [new_listing, price_change, lead, verification, payment]
        - name: read
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Lista de notificaciones

  /notifications/{notification_id}/read:
    put:
      tags: [Notifications]
      summary: Marcar como le√≠da
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notificaci√≥n marcada como le√≠da

  /notifications/read-all:
    put:
      tags: [Notifications]
      summary: Marcar todas como le√≠das
      responses:
        '200':
          description: Todas las notificaciones marcadas como le√≠das

  /notifications/settings:
    get:
      tags: [Notifications]
      summary: Obtener configuraci√≥n de notificaciones
      responses:
        '200':
          description: Configuraci√≥n actual

    put:
      tags: [Notifications]
      summary: Actualizar configuraci√≥n de notificaciones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_enabled:
                  type: boolean
                push_enabled:
                  type: boolean
                sms_enabled:
                  type: boolean
                whatsapp_enabled:
                  type: boolean
                categories:
                  type: object
                  properties:
                    new_listings:
                      type: boolean
                    price_changes:
                      type: boolean
                    leads:
                      type: boolean
                    verifications:
                      type: boolean
                    payments:
                      type: boolean
      responses:
        '200':
          description: Configuraci√≥n actualizada

  # ===========================================
  # ADMIN ENDPOINTS
  # ===========================================
  /admin/dashboard:
    get:
      tags: [Admin]
      summary: Dashboard de administraci√≥n
      responses:
        '200':
          description: M√©tricas administrativas

  /admin/users:
    get:
      tags: [Admin]
      summary: Gesti√≥n de usuarios (admin)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          schema:
            type: string
            enum: [user, tenant, landlord, agent, admin]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuarios para administraci√≥n

  /admin/users/{user_id}/suspend:
    post:
      tags: [Admin]
      summary: Suspender usuario
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                duration:
                  type: integer
                  description: D√≠as de suspensi√≥n
      responses:
        '200':
          description: Usuario suspendido

  /admin/users/{user_id}/unsuspend:
    post:
      tags: [Admin]
      summary: Quitar suspensi√≥n
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Suspensi√≥n removida

  /admin/listings:
    get:
      tags: [Admin]
      summary: Gesti√≥n de listings (admin)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, inactive, sold, rented, expired, flagged]
        - name: verification_status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
      responses:
        '200':
          description: Lista de listings para administraci√≥n

  /admin/listings/{listing_id}/flag:
    post:
      tags: [Admin]
      summary: Marcar listing como problem√°tico
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  enum: [spam, inappropriate, false_info, duplicate]
                notes:
                  type: string
      responses:
        '200':
          description: Listing marcado

  /admin/system/health:
    get:
      tags: [Admin]
      summary: Estado del sistema
      responses:
        '200':
          description: Estado de salud del sistema

  /admin/system/metrics:
    get:
      tags: [Admin]
      summary: M√©tricas del sistema
      responses:
        '200':
          description: M√©tricas t√©cnicas del sistema

  /admin/audit-log:
    get:
      tags: [Admin]
      summary: Log de auditor√≠a
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: user_id
          in: query
          schema:
            type: string
            format: uuid
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Entradas del log de auditor√≠a

  # ===========================================
  # EXTERNAL INTEGRATIONS
  # ===========================================
  /integrations/whatsapp/webhook:
    post:
      tags: [Integrations]
      summary: Webhook de WhatsApp
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado

  /integrations/payment/stripe/webhook:
    post:
      tags: [Integrations]
      summary: Webhook de Stripe
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado

  /integrations/payment/culqi/webhook:
    post:
      tags: [Integrations]
      summary: Webhook de Culqi
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado

  /integrations/maps/geocode:
    get:
      tags: [Integrations]
      summary: Geocodificaci√≥n de direcciones
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Coordenadas de la direcci√≥n

  /integrations/maps/reverse-geocode:
    get:
      tags: [Integrations]
      summary: Geocodificaci√≥n inversa
      parameters:
        - name: lat
          in: query
          required: true
          schema:
            type: number
        - name: lng
          in: query
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Direcci√≥n de las coordenadas

  /integrations/maps/nearby-places:
    get:
      tags: [Integrations]
      summary: Buscar lugares cercanos
      parameters:
        - name: lat
          in: query
          required: true
          schema:
            type: number
        - name: lng
          in: query
          required: true
          schema:
            type: number
        - name: radius
          in: query
          schema:
            type: number
            default: 1000
        - name: type
          in: query
          schema:
            type: string
            enum: [school, hospital, bank, supermarket, restaurant, metro, bus_station]
      responses:
        '200':
          description: Lugares cercanos encontrados

  /integrations/payment/mercadopago/webhook:
    post:
      tags: [Integrations]
      summary: Webhook de MercadoPago
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado

  /integrations/payment/paypal/webhook:
    post:
      tags: [Integrations]
      summary: Webhook de PayPal
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado

  # ===========================================
  # BULK OPERATIONS
  # ===========================================
  /bulk/listings/import:
    post:
      tags: [Bulk Operations]
      summary: Importar listings masivamente
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Archivo CSV o Excel
                mapping:
                  type: object
                  description: Mapeo de columnas
      responses:
        '202':
          description: Importaci√≥n iniciada
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                    format: uuid

  /bulk/listings/export:
    post:
      tags: [Bulk Operations]
      summary: Exportar listings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: object
                format:
                  type: string
                  enum: [csv, excel, pdf]
                  default: csv
                fields:
                  type: array
                  items:
                    type: string
      responses:
        '202':
          description: Exportaci√≥n iniciada
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                    format: uuid

  /bulk/jobs/{job_id}:
    get:
      tags: [Bulk Operations]
      summary: Estado de trabajo en lote
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Estado del trabajo
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                  progress:
                    type: number
                    minimum: 0
                    maximum: 100
                  total_records:
                    type: integer
                  processed_records:
                    type: integer
                  failed_records:
                    type: integer
                  download_url:
                    type: string
                    nullable: true
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time

  # ===========================================
  # WEBHOOKS MANAGEMENT
  # ===========================================
  /webhooks:
    get:
      tags: [Webhooks]
      summary: Listar webhooks configurados
      responses:
        '200':
          description: Lista de webhooks

    post:
      tags: [Webhooks]
      summary: Crear webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url, events]
              properties:
                url:
                  type: string
                  format: uri
                events:
                  type: array
                  items:
                    type: string
                    enum: [listing.created, listing.updated, listing.deleted, user.registered, payment.completed, lead.created]
                secret:
                  type: string
                active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Webhook creado

  /webhooks/{webhook_id}:
    get:
      tags: [Webhooks]
      summary: Obtener webhook por ID
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalles del webhook

    put:
      tags: [Webhooks]
      summary: Actualizar webhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                events:
                  type: array
                  items:
                    type: string
                secret:
                  type: string
                active:
                  type: boolean
      responses:
        '200':
          description: Webhook actualizado

    delete:
      tags: [Webhooks]
      summary: Eliminar webhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Webhook eliminado

  /webhooks/{webhook_id}/test:
    post:
      tags: [Webhooks]
      summary: Probar webhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_type:
                  type: string
      responses:
        '200':
          description: Webhook probado exitosamente

  # ===========================================
  # API KEYS & DEVELOPER TOOLS
  # ===========================================
  /api-keys:
    get:
      tags: [Developer Tools]
      summary: Listar API keys
      responses:
        '200':
          description: Lista de API keys

    post:
      tags: [Developer Tools]
      summary: Crear API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
                    enum: [read, write, admin]
                rate_limit:
                  type: integer
                  default: 1000
                expires_at:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '201':
          description: API key creada
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  key:
                    type: string
                  name:
                    type: string
                  scopes:
                    type: array
                    items:
                      type: string

  /api-keys/{key_id}:
    put:
      tags: [Developer Tools]
      summary: Actualizar API key
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
                rate_limit:
                  type: integer
                active:
                  type: boolean
      responses:
        '200':
          description: API key actualizada

    delete:
      tags: [Developer Tools]
      summary: Revocar API key
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API key revocada

  /api-keys/{key_id}/regenerate:
    post:
      tags: [Developer Tools]
      summary: Regenerar API key
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API key regenerada
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string

  # ===========================================
  # SYSTEM UTILITIES
  # ===========================================
  /health:
    get:
      tags: [System]
      summary: Health check del sistema
      security: []
      responses:
        '200':
          description: Sistema funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [healthy, unhealthy]
                      redis:
                        type: string
                        enum: [healthy, unhealthy]
                      kafka:
                        type: string
                        enum: [healthy, unhealthy]

  /version:
    get:
      tags: [System]
      summary: Informaci√≥n de versi√≥n
      security: []
      responses:
        '200':
          description: Informaci√≥n de versi√≥n de la API
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  build:
                    type: string
                  commit:
                    type: string
                  build_date:
                    type: string
                    format: date-time

  /docs:
    get:
      tags: [System]
      summary: Documentaci√≥n interactiva de la API
      security: []
      responses:
        '200':
          description: Documentaci√≥n Swagger/OpenAPI
          content:
            text/html:
              schema:
                type: string

# ===========================================
# COMPONENTS & SCHEMAS
# ===========================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Autenticaci√≥n usando JWT Token.
        
        **Formato**: `Authorization: Bearer <token>`
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        Autenticaci√≥n usando API Key para integraciones.
        
        **Formato**: `X-API-Key: <your-api-key>`

  parameters:
    PageParam:
      name: page
      in: query
      description: N√∫mero de p√°gina (empezando en 1)
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1
    
    LimitParam:
      name: limit
      in: query
      description: N√∫mero de elementos por p√°gina
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico del usuario
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: Email del usuario
          example: "juan.perez@email.com"
        first_name:
          type: string
          nullable: true
          description: Nombre del usuario
          example: "Juan"
        last_name:
          type: string
          nullable: true
          description: Apellido del usuario
          example: "P√©rez"
        phone:
          type: string
          nullable: true
          description: Tel√©fono del usuario
          example: "+51987654321"
        profile_picture_url:
          type: string
          format: uri
          nullable: true
          description: URL de la foto de perfil del usuario
          example: "https://cdn.easyrent.pe/avatars/user123.jpg"
        national_id:
          type: string
          nullable: true
          description: N√∫mero de documento de identidad
          example: "12345678"
        national_id_type:
          type: string
          nullable: true
          description: Tipo de documento de identidad
          example: "DNI"
        role:
          type: string
          enum: [user, tenant, landlord, agent, admin]
          description: Rol del usuario
          example: "user"
        is_verified:
          type: boolean
          description: Si el usuario est√° verificado
          example: false
        is_active:
          type: boolean
          description: Si el usuario est√° activo
          example: true
        last_login_at:
          type: string
          format: date-time
          nullable: true
          description: Fecha del √∫ltimo login
          example: "2025-09-04T01:00:00Z"
        created_at:
          type: string
          format: date-time
          description: Fecha de creaci√≥n
          example: "2025-09-04T01:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Fecha de √∫ltima actualizaci√≥n
          example: "2025-09-04T01:00:00Z"

    # Mantenemos User como alias para compatibilidad
    User:
      $ref: '#/components/schemas/UserResponse'
          description: Fecha de √∫ltima actualizaci√≥n
          example: "2025-08-28T10:00:00Z"

    Agency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "789e0123-e89b-12d3-a456-426614174002"
        name:
          type: string
          example: "Inmobiliaria Benites"
        description:
          type: string
          example: "L√≠der en el mercado inmobiliario de Lima"
        logo_url:
          type: string
          format: uri
          example: "https://cdn.easyrent.pe/logos/agency123.jpg"
        website:
          type: string
          format: uri
          example: "https://inmobiliariabenites.com"
        phone:
          type: string
          example: "+51987654321"
        email:
          type: string
          format: email
          example: "contacto@inmobiliariabenites.com"
        address:
          type: string
          example: "Av. Arequipa 1234, Lima"
        city:
          type: string
          example: "Lima"
        verified:
          type: boolean
          example: true
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.7
        total_agents:
          type: integer
          example: 15
        active_listings:
          type: integer
          example: 89
        created_at:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"

    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID √∫nico de la propiedad
          example: "456e7890-e89b-12d3-a456-426614174001"
        title:
          type: string
          description: T√≠tulo de la propiedad
          example: "Hermoso departamento en Miraflores con vista al mar"
        description:
          type: string
          description: Descripci√≥n detallada
          example: "Amplio departamento de 3 dormitorios..."
        operation_type:
          type: string
          enum: [sale, rent, temp_rent, pre_sale]
          description: Tipo de operaci√≥n
          example: "sale"
        property_type:
          type: string
          enum: [house, apartment, office, commercial, land, warehouse]
          description: Tipo de propiedad
          example: "apartment"
        price:
          type: number
          description: Precio de la propiedad
          example: 250000
        currency:
          type: string
          default: "PEN"
          description: Moneda del precio
          example: "USD"
        area:
          type: number
          description: √Årea en metros cuadrados
          example: 120.5
        bedrooms:
          type: integer
          minimum: 0
          description: N√∫mero de dormitorios
          example: 3
        bathrooms:
          type: integer
          minimum: 0
          description: N√∫mero de ba√±os
          example: 2
        parking_spots:
          type: integer
          minimum: 0
          description: Espacios de estacionamiento
          example: 1
        address:
          type: string
          description: Direcci√≥n completa
          example: "Av. Larco 123, Miraflores"
        city:
          type: string
          description: Ciudad
          example: "Lima"
        district:
          type: string
          description: Distrito
          example: "Miraflores"
        latitude:
          type: number
          format: double
          description: Latitud
          example: -12.1191
        longitude:
          type: number
          format: double
          description: Longitud
          example: -77.0372
        features:
          type: array
          items:
            type: string
          description: Caracter√≠sticas de la propiedad
          example: ["balc√≥n", "cocina_equipada", "aire_acondicionado"]
        amenities:
          type: array
          items:
            type: string
          description: Amenidades del edificio/complejo
          example: ["piscina", "gimnasio", "porter√≠a_24h"]
        status:
          type: string
          enum: [draft, active, inactive, sold, rented, expired]
          description: Estado de la propiedad
          example: "active"
        verified:
          type: boolean
          description: Si la propiedad est√° verificada
          example: true
        views_count:
          type: integer
          description: N√∫mero total de visualizaciones
          example: 1245
        leads_count:
          type: integer
          description: N√∫mero de leads generados
          example: 15
        images_count:
          type: integer
          description: N√∫mero de im√°genes
          example: 8
        videos_count:
          type: integer
          description: N√∫mero de videos
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"

    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "plan_123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Plan Premium"
        description:
          type: string
          example: "Plan completo para agencias inmobiliarias"
        price_monthly:
          type: number
          example: 99.99
        price_yearly:
          type: number
          example: 999.99
        features:
          type: array
          items:
            type: string
          example: ["Listings ilimitados", "Analytics avanzados", "Soporte premium"]
        limits:
          type: object
          properties:
            max_listings:
              type: integer
              example: -1
            max_images:
              type: integer
              example: 50
            max_videos:
              type: integer
              example: 5
        active:
          type: boolean
          example: true

    # Request/Response Schemas
    CreateUserRequest:
      type: object
      required: [email, password, first_name, last_name, phone, role]
      properties:
        email:
          type: string
          format: email
          example: "juan.perez@email.com"
        password:
          type: string
          minLength: 8
          example: "mi_password_seguro123"
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "P√©rez"
        phone:
          type: string
          example: "+51987654321"
        role:
          type: string
          enum: [user, tenant, landlord, agent, admin]
          example: "landlord"

    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
          example: "Juan Carlos"
        last_name:
          type: string
          example: "P√©rez Garc√≠a"
        phone:
          type: string
          example: "+51987654321"
        bio:
          type: string
          example: "Agente inmobiliario especializado en Lima Moderna"

    CreateAgencyRequest:
      type: object
      required: [name, phone, email, address, city]
      properties:
        name:
          type: string
          example: "Inmobiliaria Benites"
        description:
          type: string
          example: "Especialistas en propiedades de lujo"
        phone:
          type: string
          example: "+51987654321"
        email:
          type: string
          format: email
          example: "contacto@inmobiliariabenites.com"
        website:
          type: string
          example: "https://inmobiliariabenites.com"
        address:
          type: string
          example: "Av. Arequipa 1234, Lima"
        city:
          type: string
          example: "Lima"

    UpdateAgencyRequest:
      type: object
      properties:
        name:
          type: string
          example: "Inmobiliaria Benites SAC"
        description:
          type: string
          example: "Descripci√≥n actualizada"
        phone:
          type: string
          example: "+51987654321"
        email:
          type: string
          format: email
          example: "nuevo@inmobiliariabenites.com"
        website:
          type: string
          example: "https://new.inmobiliariabenites.com"
        address:
          type: string
          example: "Nueva direcci√≥n"

    CreateListingRequest:
      type: object
      required: [title, operation_type, property_type, price, area, address, city, district]
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 200
          example: "Hermoso departamento en Miraflores"
        description:
          type: string
          maxLength: 2000
          example: "Amplio departamento de 3 dormitorios..."
        operation_type:
          type: string
          enum: [sale, rent, temp_rent, pre_sale]
          example: "sale"
        property_type:
          type: string
          enum: [house, apartment, office, commercial, land, warehouse]
          example: "apartment"
        price:
          type: number
          minimum: 0
          example: 250000
        currency:
          type: string
          enum: [PEN, USD]
          default: "PEN"
          example: "USD"
        area:
          type: number
          minimum: 1
          example: 120.5
        bedrooms:
          type: integer
          minimum: 0
          maximum: 20
          example: 3
        bathrooms:
          type: integer
          minimum: 0
          maximum: 20
          example: 2
        parking_spots:
          type: integer
          minimum: 0
          maximum: 10
          example: 1
        age_years:
          type: integer
          minimum: 0
          maximum: 200
          description: "Antig√ºedad de la vivienda en a√±os"
          example: 5
        address:
          type: string
          minLength: 10
          maxLength: 200
          example: "Av. Larco 123, Miraflores"
        city:
          type: string
          minLength: 2
          maxLength: 50
          example: "Lima"
        district:
          type: string
          minLength: 2
          maxLength: 50
          example: "Miraflores"
        features:
          type: array
          items:
            type: string
          maxItems: 20
          example: ["balc√≥n", "cocina_equipada"]
        amenities:
          type: array
          items:
            type: string
          maxItems: 20
          example: ["piscina", "gimnasio"]

    UpdateListingRequest:
      type: object
      properties:
        title:
          type: string
          example: "T√≠tulo actualizado"
        description:
          type: string
          example: "Descripci√≥n actualizada"
        price:
          type: number
          example: 230000
        area:
          type: number
          example: 125.0
        bedrooms:
          type: integer
          example: 3
        bathrooms:
          type: integer
          example: 2
        parking_spots:
          type: integer
          example: 2
        features:
          type: array
          items:
            type: string
          example: ["balc√≥n", "terraza"]
        amenities:
          type: array
          items:
            type: string
          example: ["piscina", "sala_eventos"]

    UserPreferences:
      type: object
      properties:
        language:
          type: string
          default: es
          example: "es"
        currency:
          type: string
          default: PEN
          example: "PEN"
        timezone:
          type: string
          default: America/Lima
          example: "America/Lima"
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false

    PrivacySettings:
      type: object
      properties:
        profile_visible:
          type: boolean
          default: true
        contact_visible:
          type: boolean
          default: true
        marketing_emails:
          type: boolean
          default: false
        data_processing_consent:
          type: boolean
          default: true

    # Pagination Schemas
    PaginatedUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginatedAgencies:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Agency'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginatedListings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          description: P√°gina actual
          example: 1
        per_page:
          type: integer
          description: Elementos por p√°gina
          example: 20
        total:
          type: integer
          description: Total de elementos
          example: 150
        last_page:
          type: integer
          description: √öltima p√°gina
          example: 8
        from:
          type: integer
          description: Elemento inicial en la p√°gina
          example: 1
        to:
          type: integer
          description: Elemento final en la p√°gina
          example: 20
        has_next:
          type: boolean
          description: Si hay p√°gina siguiente
          example: true
        has_prev:
          type: boolean
          description: Si hay p√°gina anterior
          example: false

    SearchResults:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        facets:
          type: object
          description: Facetas para filtros
          properties:
            cities:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Lima"
                  count:
                    type: integer
                    example: 45
            districts:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Miraflores"
                  city:
                    type: string
                    example: "Lima"
                  count:
                    type: integer
                    example: 12
            price_ranges:
              type: array
              items:
                type: object
                properties:
                  min:
                    type: number
                    example: 100000
                  max:
                    type: number
                    example: 200000
                  count:
                    type: integer
                    example: 25
        search_info:
          type: object
          properties:
            query:
              type: string
              example: "departamento 3 dormitorios"
            total_results:
              type: integer
              example: 150
            search_time:
              type: number
              description: Tiempo de b√∫squeda en ms
              example: 45.2

    # Error Schema
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: C√≥digo de error √∫nico
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Mensaje de error legible
              example: "Los datos proporcionados no son v√°lidos"
            details:
              type: object
              nullable: true
              description: Detalles adicionales del error
              example:
                field: "email"
                issue: "Email already exists"
            timestamp:
              type: string
              format: date-time
              example: "2025-08-28T10:00:00Z"
            request_id:
              type: string
              description: ID √∫nico de la petici√≥n
              example: "req_123456789"
              $ref: '#/components/schemas/UserRegistrationRequest'
            example:
              email: "juan.perez@email.com"
              password: "mi_password_seguro123"
              first_name: "Juan"
              last_name: "P√©rez"
              phone: "+51987654321"
              role: "landlord"
              marketing_consent: true
      responses:
        '201':
          description: ‚úÖ Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: ‚ö†Ô∏è Email ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: üîë Inicio de sesi√≥n
      description: Autentica un usuario y devuelve tokens JWT
      operationId: login_user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "juan.perez@email.com"
              password: "mi_password_seguro123"
              remember_me: true
      responses:
        '200':
          description: ‚úÖ Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: ‚ùå Credenciales inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: üö™ Cerrar sesi√≥n
      description: Invalida el token JWT actual
      operationId: logout_user
      responses:
        '200':
          description: ‚úÖ Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sesi√≥n cerrada exitosamente"

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: üîÑ Renovar token de acceso
      description: Genera un nuevo access token usando el refresh token
      operationId: refresh_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
                  description: Token de renovaci√≥n v√°lido
      responses:
        '200':
          description: ‚úÖ Token renovado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: ‚ùå Refresh token inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: üìß Solicitar reset de contrase√±a
      description: Env√≠a un email con enlace para resetear la contrase√±a
      operationId: forgot_password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  description: Email del usuario
                  example: "juan.perez@email.com"
      responses:
        '200':
          description: ‚úÖ Email de reset enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email de recuperaci√≥n enviado"

  # ===========================================
  # USER MANAGEMENT
  # ===========================================
  /users/me:
    get:
      tags: [Users]
      summary: üë§ Obtener perfil propio
      description: Obtiene la informaci√≥n del usuario autenticado
      operationId: get_current_user
      responses:
        '200':
          description: ‚úÖ Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [Users]
      summary: ‚úèÔ∏è Actualizar perfil propio
      description: Actualiza la informaci√≥n del usuario autenticado
      operationId: update_current_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ‚úÖ Perfil actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags: [Users]
      summary: üóëÔ∏è Eliminar cuenta propia
      description: Elimina permanentemente la cuenta del usuario
      operationId: delete_current_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  description: Contrase√±a actual para confirmar
      responses:
        '200':
          description: ‚úÖ Cuenta eliminada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cuenta eliminada exitosamente"

  # ===========================================
  # LISTINGS MANAGEMENT
  # ===========================================
  /listings:
    get:
      tags: [Listings]
      summary: üè† Listar propiedades
      description: Obtiene una lista paginada de propiedades con filtros
      operationId: list_listings
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: operation_type
          in: query
          description: Tipo de operaci√≥n
          schema:
            type: string
            enum: [sale, rent, temp_rent, pre_sale]
        - name: property_type
          in: query
          description: Tipo de propiedad
          schema:
            type: string
            enum: [house, apartment, office, commercial, land, warehouse]
        - name: city
          in: query
          description: Ciudad
          schema:
            type: string
            example: "Lima"
        - name: district
          in: query
          description: Distrito
          schema:
            type: string
            example: "Miraflores"
        - name: min_price
          in: query
          description: Precio m√≠nimo
          schema:
            type: number
            example: 100000
        - name: max_price
          in: query
          description: Precio m√°ximo
          schema:
            type: number
            example: 500000
        - name: bedrooms
          in: query
          description: N√∫mero de dormitorios
          schema:
            type: integer
            example: 3
        - name: bathrooms
          in: query
          description: N√∫mero de ba√±os
          schema:
            type: integer
            example: 2
        - name: verified
          in: query
          description: Solo propiedades verificadas
          schema:
            type: boolean
            example: true
        - name: sort
          in: query
          description: Criterio de ordenamiento
          schema:
            type: string
            enum: [price_asc, price_desc, area_asc, area_desc, date_asc, date_desc, age_asc, age_desc, relevance]
            default: relevance
      responses:
        '200':
          description: ‚úÖ Lista de propiedades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListings'

    post:
      tags: [Listings]
      summary: ‚ûï Crear nueva propiedad
      description: Crea un nuevo anuncio de propiedad
      operationId: create_listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListingRequest'
      responses:
        '201':
          description: ‚úÖ Propiedad creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          description: ‚ùå Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /listings/{listing_id}:
    get:
      tags: [Listings]
      summary: üè† Obtener propiedad por ID
      description: Obtiene los detalles de una propiedad espec√≠fica
      operationId: get_listing
      security: []
      parameters:
        - name: listing_id
          in: path
          required: true
          description: ID √∫nico de la propiedad
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ‚úÖ Datos de la propiedad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingDetail'
        '404':
          description: ‚ùå Propiedad no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Listings]
      summary: ‚úèÔ∏è Actualizar propiedad
      description: Actualiza los datos de una propiedad existente
      operationId: update_listing
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListingRequest'
      responses:
        '200':
          description: ‚úÖ Propiedad actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'

  # ===========================================
  # SEARCH & FILTERS
  # ===========================================
  /search:
    get:
      tags: [Search]
      summary: üîç B√∫squeda general
      description: |
        Realiza una b√∫squeda inteligente de propiedades usando:
        - **Text Search**: B√∫squeda por palabras clave
        - **Location Search**: B√∫squeda por ubicaci√≥n
        - **Proximity Search**: B√∫squeda por coordenadas y radio
        - **Advanced Filters**: Filtros avanzados
      operationId: search_listings
      security: []
      parameters:
        - name: q
          in: query
          description: Texto de b√∫squeda libre
          schema:
            type: string
            example: "departamento 3 dormitorios Miraflores"
        - name: location
          in: query
          description: Ubicaci√≥n (ciudad, distrito, etc.)
          schema:
            type: string
            example: "Miraflores, Lima"
        - name: lat
          in: query
          description: Latitud para b√∫squeda por proximidad
          schema:
            type: number
            format: double
            example: -12.1191
        - name: lng
          in: query
          description: Longitud para b√∫squeda por proximidad
          schema:
            type: number
            format: double
            example: -77.0372
        - name: radius
          in: query
          description: Radio en kil√≥metros
          schema:
            type: number
            minimum: 0.1
            maximum: 50
            default: 5
            example: 2.5
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: ‚úÖ Resultados de b√∫squeda
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /search/suggestions:
    get:
      tags: [Search]
      summary: üí° Sugerencias de b√∫squeda
      description: Proporciona autocompletado para b√∫squedas
      operationId: search_suggestions
      security: []
      parameters:
        - name: q
          in: query
          required: true
          description: Texto parcial para autocompletar
          schema:
            type: string
            minLength: 2
            example: "mira"
        - name: type
          in: query
          description: Tipo de sugerencias
          schema:
            type: string
            enum: [location, property_type, all]
            default: all
      responses:
        '200':
          description: ‚úÖ Sugerencias encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSuggestions'

  # ===========================================
  # ANALYTICS & REPORTS
  # ===========================================
  /analytics/dashboard:
    get:
      tags: [Analytics]
      summary: üìä Dashboard principal
      description: Obtiene m√©tricas principales para el dashboard
      operationId: get_dashboard_analytics
      parameters:
        - name: period
          in: query
          description: Per√≠odo de an√°lisis
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: ‚úÖ M√©tricas del dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAnalytics'

  # ===========================================
  # SYSTEM UTILITIES
  # ===========================================
  /health:
    get:
      tags: [System]
      summary: ‚ù§Ô∏è Health check del sistema
      description: |
        Verifica el estado de salud del sistema y sus dependencias:
        - **Database**: PostgreSQL
        - **Cache**: Redis
        - **Message Broker**: Apache Kafka
        - **External APIs**: Maps, Payment providers
      operationId: health_check
      security: []
      responses:
        '200':
          description: ‚úÖ Sistema funcionando correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: ‚ö†Ô∏è Sistema con problemas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /version:
    get:
      tags: [System]
      summary: ‚ÑπÔ∏è Informaci√≥n de versi√≥n
      description: Obtiene informaci√≥n sobre la versi√≥n de la API
      operationId: get_version
      security: []
      responses:
        '200':
          description: ‚úÖ Informaci√≥n de versi√≥n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'

# ===========================================
# COMPONENTS & SCHEMAS
# ===========================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Autenticaci√≥n usando JWT Token.
        
        **Formato**: `Authorization: Bearer <token>`
        
        **Ejemplo**: `Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...`
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        Autenticaci√≥n usando API Key para integraciones.
        
        **Formato**: `X-API-Key: <your-api-key>`

  parameters:
    PageParam:
      name: page
      in: query
      description: N√∫mero de p√°gina (empezando en 1)
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1
    
    LimitParam:
      name: limit
      in: query
      description: N√∫mero de elementos por p√°gina
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

  schemas:
    # ===========================================
    # AUTHENTICATION SCHEMAS
    # ===========================================
    UserRegistrationRequest:
      type: object
      required: [email, password, first_name, last_name, phone, role]
      properties:
        email:
          type: string
          format: email
          description: Email √∫nico del usuario
          example: "juan.perez@email.com"
        password:
          type: string
          minLength: 8
          description: Contrase√±a segura (m√≠nimo 8 caracteres)
          example: "mi_password_seguro123"
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          description: Nombre del usuario
          example: "Juan"
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          description: Apellido del usuario
          example: "P√©rez"
        phone:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Tel√©fono en formato internacional
          example: "+51987654321"
        role:
          type: string
          enum: [user, tenant, landlord, agent]
          description: Rol del usuario en el sistema
          example: "landlord"
        agency_id:
          type: string
          format: uuid
          description: ID de la agencia (solo para agentes)
          nullable: true
        marketing_consent:
          type: boolean
          default: false
          description: Consentimiento para recibir marketing
          example: true

    UserRegistrationResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: "Usuario creado exitosamente. Revisa tu email para verificar tu cuenta."

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Email del usuario
          example: "juan.perez@email.com"
        password:
          type: string
          description: Contrase√±a del usuario
          example: "mi_password_seguro123"
        remember_me:
          type: boolean
          default: false
          description: Mantener sesi√≥n activa por m√°s tiempo
          example: true

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        token_type:
          type: string
          default: "bearer"
          example: "bearer"
        expires_in:
          type: integer
          description: Tiempo de expiraci√≥n en segundos
          example: 3600
        user:
          $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        token_type:
          type: string
          default: "bearer"
        expires_in:
          type: integer
          example: 3600

    # ===========================================
    # USER SCHEMAS
    # ===========================================
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID √∫nico del usuario
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: Email del usuario
          example: "juan.perez@email.com"
        first_name:
          type: string
          description: Nombre del usuario
          example: "Juan"
        last_name:
          type: string
          description: Apellido del usuario
          example: "P√©rez"
        phone:
          type: string
          description: Tel√©fono del usuario
          example: "+51987654321"
        role:
          type: string
          enum: [user, tenant, landlord, agent, admin]
          description: Rol del usuario
          example: "landlord"
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Estado del usuario
          example: "active"
        verified:
          type: boolean
          description: Si el usuario est√° verificado
          example: true
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL del avatar del usuario
          example: "https://cdn.easyrent.pe/avatars/user123.jpg"
        bio:
          type: string
          nullable: true
          description: Biograf√≠a del usuario
          example: "Agente inmobiliario con 10 a√±os de experiencia"
        created_at:
          type: string
          format: date-time
          description: Fecha de creaci√≥n
          example: "2025-08-28T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Fecha de √∫ltima actualizaci√≥n
          example: "2025-08-28T10:00:00Z"

    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Juan Carlos"
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "P√©rez Garc√≠a"
        phone:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+51987654321"
        bio:
          type: string
          maxLength: 500
          example: "Agente inmobiliario especializado en Lima Moderna"

    # ===========================================
    # LISTING SCHEMAS
    # ===========================================
    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID √∫nico de la propiedad
          example: "456e7890-e89b-12d3-a456-426614174001"
        title:
          type: string
          description: T√≠tulo de la propiedad
          example: "Hermoso departamento en Miraflores con vista al mar"
        description:
          type: string
          description: Descripci√≥n detallada
          example: "Amplio departamento de 3 dormitorios..."
        operation_type:
          type: string
          enum: [sale, rent, temp_rent, pre_sale]
          description: Tipo de operaci√≥n
          example: "sale"
        property_type:
          type: string
          enum: [house, apartment, office, commercial, land, warehouse]
          description: Tipo de propiedad
          example: "apartment"
        price:
          type: number
          description: Precio de la propiedad
          example: 250000
        currency:
          type: string
          default: "PEN"
          description: Moneda del precio
          example: "USD"
        area:
          type: number
          description: √Årea en metros cuadrados
          example: 120.5
        bedrooms:
          type: integer
          minimum: 0
          description: N√∫mero de dormitorios
          example: 3
        bathrooms:
          type: integer
          minimum: 0
          description: N√∫mero de ba√±os
          example: 2
        parking_spots:
          type: integer
          minimum: 0
          description: Espacios de estacionamiento
          example: 1
        address:
          type: string
          description: Direcci√≥n completa
          example: "Av. Larco 123, Miraflores"
        city:
          type: string
          description: Ciudad
          example: "Lima"
        district:
          type: string
          description: Distrito
          example: "Miraflores"
        latitude:
          type: number
          format: double
          description: Latitud
          example: -12.1191
        longitude:
          type: number
          format: double
          description: Longitud
          example: -77.0372
        features:
          type: array
          items:
            type: string
          description: Caracter√≠sticas de la propiedad
          example: ["balc√≥n", "cocina_equipada", "aire_acondicionado"]
        amenities:
          type: array
          items:
            type: string
          description: Amenidades del edificio/complejo
          example: ["piscina", "gimnasio", "porter√≠a_24h"]
        status:
          type: string
          enum: [draft, active, inactive, sold, rented, expired]
          description: Estado de la propiedad
          example: "active"
        verified:
          type: boolean
          description: Si la propiedad est√° verificada
          example: true
        views_count:
          type: integer
          description: N√∫mero total de visualizaciones
          example: 1245
        leads_count:
          type: integer
          description: N√∫mero de leads generados
          example: 15
        images_count:
          type: integer
          description: N√∫mero de im√°genes
          example: 8
        videos_count:
          type: integer
          description: N√∫mero de videos
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"

    ListingDetail:
      allOf:
        - $ref: '#/components/schemas/Listing'
        - type: object
          properties:
            owner:
              $ref: '#/components/schemas/User'
            agency:
              $ref: '#/components/schemas/Agency'
              nullable: true
            images:
              type: array
              items:
                $ref: '#/components/schemas/MediaItem'
            videos:
              type: array
              items:
                $ref: '#/components/schemas/MediaItem'
            similar_listings:
              type: array
              items:
                $ref: '#/components/schemas/Listing'
              maxItems: 5

    CreateListingRequest:
      type: object
      required: [title, operation_type, property_type, price, area, address, city, district]
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 200
          description: T√≠tulo descriptivo de la propiedad
          example: "Hermoso departamento en Miraflores con vista al mar"
        description:
          type: string
          maxLength: 2000
          description: Descripci√≥n detallada
          example: "Amplio departamento de 3 dormitorios ubicado en la mejor zona de Miraflores..."
        operation_type:
          type: string
          enum: [sale, rent, temp_rent, pre_sale]
          description: Tipo de operaci√≥n
          example: "sale"
        property_type:
          type: string
          enum: [house, apartment, office, commercial, land, warehouse]
          description: Tipo de propiedad
          example: "apartment"
        price:
          type: number
          minimum: 0
          description: Precio de la propiedad
          example: 250000
        currency:
          type: string
          enum: [PEN, USD]
          default: "PEN"
          description: Moneda del precio
          example: "USD"
        area:
          type: number
          minimum: 1
          description: √Årea en metros cuadrados
          example: 120.5
        bedrooms:
          type: integer
          minimum: 0
          maximum: 20
          description: N√∫mero de dormitorios
          example: 3
        bathrooms:
          type: integer
          minimum: 0
          maximum: 20
          description: N√∫mero de ba√±os
          example: 2
        parking_spots:
          type: integer
          minimum: 0
          maximum: 10
          description: Espacios de estacionamiento
          example: 1
        address:
          type: string
          minLength: 10
          maxLength: 200
          description: Direcci√≥n completa
          example: "Av. Larco 123, Miraflores"
        city:
          type: string
          minLength: 2
          maxLength: 50
          description: Ciudad
          example: "Lima"
        district:
          type: string
          minLength: 2
          maxLength: 50
          description: Distrito
          example: "Miraflores"
        features:
          type: array
          items:
            type: string
          maxItems: 20
          description: Caracter√≠sticas de la propiedad
          example: ["balc√≥n", "cocina_equipada", "aire_acondicionado"]
        amenities:
          type: array
          items:
            type: string
          maxItems: 20
          description: Amenidades del edificio/complejo
          example: ["piscina", "gimnasio", "porter√≠a_24h"]

    UpdateListingRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 200
          example: "Hermoso departamento en Miraflores - PRECIO ACTUALIZADO"
        description:
          type: string
          maxLength: 2000
          example: "Descripci√≥n actualizada de la propiedad..."
        price:
          type: number
          minimum: 0
          example: 230000
        area:
          type: number
          minimum: 1
          example: 125.0
        bedrooms:
          type: integer
          minimum: 0
          maximum: 20
          example: 3
        bathrooms:
          type: integer
          minimum: 0
          maximum: 20
          example: 2
        parking_spots:
          type: integer
          minimum: 0
          maximum: 10
          example: 2
        features:
          type: array
          items:
            type: string
          maxItems: 20
          example: ["balc√≥n", "cocina_equipada", "aire_acondicionado", "terraza"]
        amenities:
          type: array
          items:
            type: string
          maxItems: 20
          example: ["piscina", "gimnasio", "porter√≠a_24h", "sala_eventos"]

    # ===========================================
    # PAGINATION & SEARCH SCHEMAS
    # ===========================================
    PaginatedListings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          description: P√°gina actual
          example: 1
        per_page:
          type: integer
          description: Elementos por p√°gina
          example: 20
        total:
          type: integer
          description: Total de elementos
          example: 150
        last_page:
          type: integer
          description: √öltima p√°gina
          example: 8
        from:
          type: integer
          description: Elemento inicial en la p√°gina
          example: 1
        to:
          type: integer
          description: Elemento final en la p√°gina
          example: 20
        has_next:
          type: boolean
          description: Si hay p√°gina siguiente
          example: true
        has_prev:
          type: boolean
          description: Si hay p√°gina anterior
          example: false

    SearchResults:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        facets:
          type: object
          description: Facetas para filtros
          properties:
            cities:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Lima"
                  count:
                    type: integer
                    example: 45
            districts:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Miraflores"
                  city:
                    type: string
                    example: "Lima"
                  count:
                    type: integer
                    example: 12
            price_ranges:
              type: array
              items:
                type: object
                properties:
                  min:
                    type: number
                    example: 100000
                  max:
                    type: number
                    example: 200000
                  count:
                    type: integer
                    example: 25
        search_info:
          type: object
          properties:
            query:
              type: string
              example: "departamento 3 dormitorios"
            total_results:
              type: integer
              example: 150
            search_time:
              type: number
              description: Tiempo de b√∫squeda en ms
              example: 45.2

    SearchSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: Texto de la sugerencia
                example: "Miraflores"
              type:
                type: string
                enum: [location, property_type, feature]
                description: Tipo de sugerencia
                example: "location"
              count:
                type: integer
                description: N√∫mero de resultados
                example: 12
              highlight:
                type: string
                description: Texto resaltado
                example: "<strong>Mira</strong>flores"

    # ===========================================
    # ANALYTICS SCHEMAS
    # ===========================================
    DashboardAnalytics:
      type: object
      properties:
        summary:
          type: object
          properties:
            total_listings:
              type: integer
              example: 1245
            active_listings:
              type: integer
              example: 980
            total_views:
              type: integer
              example: 15670
            total_leads:
              type: integer
              example: 234
            conversion_rate:
              type: number
              format: float
              example: 1.49
        time_series:
          type: object
          properties:
            views:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    example: "2025-08-28"
                  count:
                    type: integer
                    example: 156
            leads:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    example: "2025-08-28"
                  count:
                    type: integer
                    example: 8
        top_performing:
          type: object
          properties:
            listings:
              type: array
              items:
                $ref: '#/components/schemas/Listing'
              maxItems: 5
            locations:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Miraflores"
                  count:
                    type: integer
                    example: 45
              maxItems: 10

    # ===========================================
    # SHARED SCHEMAS
    # ===========================================
    Agency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "789e0123-e89b-12d3-a456-426614174002"
        name:
          type: string
          example: "Inmobiliaria Benites"
        description:
          type: string
          example: "L√≠der en el mercado inmobiliario de Lima"
        logo_url:
          type: string
          format: uri
          example: "https://cdn.easyrent.pe/logos/agency123.jpg"
        website:
          type: string
          format: uri
          example: "https://inmobiliariabenites.com"
        phone:
          type: string
          example: "+51987654321"
        email:
          type: string
          format: email
          example: "contacto@inmobiliariabenites.com"
        address:
          type: string
          example: "Av. Arequipa 1234, Lima"
        city:
          type: string
          example: "Lima"
        verified:
          type: boolean
          example: true
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.7
        total_agents:
          type: integer
          example: 15
        active_listings:
          type: integer
          example: 89

    MediaItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [image, video]
        url:
          type: string
          format: uri
        thumbnail_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        is_primary:
          type: boolean
        order_index:
          type: integer
        metadata:
          type: object
          properties:
            size:
              type: integer
            width:
              type: integer
              nullable: true
            height:
              type: integer
              nullable: true
            duration:
              type: number
              nullable: true

    # ===========================================
    # SYSTEM SCHEMAS
    # ===========================================
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Estado general del sistema
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Timestamp del check
          example: "2025-08-28T10:00:00Z"
        version:
          type: string
          description: Versi√≥n de la API
          example: "1.0.0"
        uptime:
          type: number
          description: Tiempo activo en segundos
          example: 86400.5
        services:
          type: object
          description: Estado de servicios dependientes
          properties:
            database:
              $ref: '#/components/schemas/ServiceHealth'
            redis:
              $ref: '#/components/schemas/ServiceHealth'
            kafka:
              $ref: '#/components/schemas/ServiceHealth'
            external_apis:
              type: object
              properties:
                maps:
                  $ref: '#/components/schemas/ServiceHealth'
                payments:
                  $ref: '#/components/schemas/ServiceHealth'

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        response_time:
          type: number
          description: Tiempo de respuesta en ms
          example: 15.2
        last_check:
          type: string
          format: date-time
          example: "2025-08-28T10:00:00Z"
        message:
          type: string
          nullable: true
          example: "Connection successful"

    VersionResponse:
      type: object
      properties:
        version:
          type: string
          description: Versi√≥n de la API
          example: "1.0.0"
        build:
          type: string
          description: N√∫mero de build
          example: "2025.08.28.001"
        commit:
          type: string
          description: Hash del commit de Git
          example: "a1b2c3d4e5f6"
        build_date:
          type: string
          format: date-time
          description: Fecha de build
          example: "2025-08-28T08:30:00Z"
        environment:
          type: string
          enum: [development, staging, production]
          description: Entorno actual
          example: "production"
        python_version:
          type: string
          description: Versi√≥n de Python
          example: "3.11.5"
        fastapi_version:
          type: string
          description: Versi√≥n de FastAPI
          example: "0.104.1"

    # ===========================================
    # ERROR SCHEMAS
    # ===========================================
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: C√≥digo de error √∫nico
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Mensaje de error legible
              example: "Los datos proporcionados no son v√°lidos"
            details:
              type: object
              nullable: true
              description: Detalles adicionales del error
              example:
                field: "email"
                issue: "Email already exists"
            timestamp:
              type: string
              format: date-time
              example: "2025-08-28T10:00:00Z"
            request_id:
              type: string
              description: ID √∫nico de la petici√≥n
              example: "req_123456789"
